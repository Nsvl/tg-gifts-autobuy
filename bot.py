import asyncio
import os
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types
from aiogram.client.default import DefaultBotProperties
from aiogram.methods import GetAvailableGifts, SendGift
from aiogram.filters import Command

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
TELEGRAM_ID = int(os.getenv("TELEGRAM_ID"))
MAXIMUM_SUPPLY = int(os.getenv("MAXIMUM_SUPPLY", 700000))
MAXIMUM_PRICE = int(os.getenv("MAXIMUM_PRICE", 6000))
BUY_STRATEGY = int(os.getenv("BUY_STRATEGY", 1))

bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode="HTML")
)
dp = Dispatcher()

is_paused = False
last_gifts = []

@dp.message(Command("pause"))
async def pause_cmd(message: types.Message):
    global is_paused
    is_paused = True
    await message.answer("‚è∏Ô∏è –ê–≤—Ç–æ–ø–æ–∫—É–ø–∫–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")

@dp.message(Command("resume"))
async def resume_cmd(message: types.Message):
    global is_paused
    is_paused = False
    await message.answer("‚ñ∂Ô∏è –ê–≤—Ç–æ–ø–æ–∫—É–ø–∫–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞.")

@dp.message(Command("status"))
async def status_cmd(message: types.Message):
    await message.answer(
        f"ü§ñ –°—Ç–∞—Ç—É—Å: {'‚è∏Ô∏è –ü–∞—É–∑–∞' if is_paused else '‚ñ∂Ô∏è –ê–∫—Ç–∏–≤–µ–Ω'}\n"
        f"–§–∏–ª—å—Ç—Ä: –¥–æ {MAXIMUM_PRICE} –∑–≤—ë–∑–¥, –Ω–µ –±–æ–ª–µ–µ {MAXIMUM_SUPPLY} —à—Ç.\n"
        f"–°—Ç—Ä–∞—Ç–µ–≥–∏—è: {BUY_STRATEGY}"
    )

@dp.message(Command("last"))
async def last_cmd(message: types.Message):
    if not last_gifts:
        await message.answer("–ü–æ–¥–∞—Ä–∫–æ–≤ –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return
    msg = "üéÅ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏:\n"
    for gift in last_gifts:
        msg += f"‚Ä¢ {getattr(gift, 'id', '?')} ‚Äî {getattr(gift, 'star_count', '?')} –∑–≤—ë–∑–¥, –≤—Å–µ–≥–æ: {getattr(gift, 'total_count', '?')}\n"
    await message.answer(msg)

def log(msg):
    print(f"[{asyncio.get_event_loop().time():.0f}] {msg}")

async def main():
    global last_gifts
    log("ü§ñ Gift auto-buyer started!")
    await bot.send_message(TELEGRAM_ID, "ü§ñ Gift auto-buyer –∑–∞–ø—É—â–µ–Ω!\n\n"
                                        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                                        "/pause ‚Äî –ø–∞—É–∑–∞\n"
                                        "/resume ‚Äî –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å\n"
                                        "/status ‚Äî —Å—Ç–∞—Ç—É—Å\n"
                                        "/last ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∏")

    last_not_sold_out_ids = set()
    while True:
        try:
            if is_paused:
                await asyncio.sleep(2)
                continue

            gifts = await bot(GetAvailableGifts())
            if not gifts or not getattr(gifts, "gifts", None):
                log("–ù–µ—Ç –ø–æ–¥–∞—Ä–∫–æ–≤, –∂–¥–µ–º...")
                await asyncio.sleep(5)
                continue

            not_sold_out = [
                g for g in gifts.gifts
                if getattr(g, "limited", False) and not getattr(g, "soldOut", False)
            ]
            last_gifts = not_sold_out

            current_ids = set(getattr(g, "id", None) for g in not_sold_out)
            new_ids = current_ids - last_not_sold_out_ids
            if new_ids:
                await bot.send_message(
                    TELEGRAM_ID,
                    f"üéâ –ù–æ–≤—ã–µ –ø–æ–¥–∞—Ä–∫–∏ –≤—ã—à–ª–∏! ID: {', '.join(map(str, new_ids))}"
                )
                log(f"–ù–æ–≤—ã–µ –ø–æ–¥–∞—Ä–∫–∏: {', '.join(map(str, new_ids))}")
            last_not_sold_out_ids = current_ids

            if not not_sold_out:
                log("–ñ–¥—ë–º –ø–æ–¥–∞—Ä–∫–æ–≤...")
                await asyncio.sleep(5)
                continue

            gifts_matching = [
                g for g in not_sold_out
                if getattr(g, "star_count", 0) <= MAXIMUM_PRICE and
                   getattr(g, "total_count", 0) <= MAXIMUM_SUPPLY
            ]
            if not gifts_matching:
                log("–ù–µ—Ç –ø–æ–¥–∞—Ä–∫–æ–≤ –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º")
                await asyncio.sleep(5)
                continue

            if BUY_STRATEGY == 2:
                gifts_to_buy = [gifts_matching[0]]
            elif BUY_STRATEGY == 3:
                gifts_to_buy = [gifts_matching[-1]]
            else:
                gifts_to_buy = gifts_matching

            for gift in gifts_to_buy:
                try:
                    result = await bot(SendGift(
                        chat_id=TELEGRAM_ID,
                        gift_id=getattr(gift, "id"),
                        text="üéÅ –ê–≤—Ç–æ–ø–æ–∫—É–ø–∫–∞ –ø–æ–¥–∞—Ä–∫–∞!"
                    ))
                    if result:
                        await bot.send_message(
                            TELEGRAM_ID,
                            f"‚úÖ –ö—É–ø–ª–µ–Ω –ø–æ–¥–∞—Ä–æ–∫: {getattr(gift, 'id')} –∑–∞ {getattr(gift, 'star_count', 0)} ‚≠êÔ∏è"
                        )
                        log(f"–ö—É–ø–ª–µ–Ω –ø–æ–¥–∞—Ä–æ–∫: {getattr(gift, 'id')}")
                    else:
                        log(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∫—É–ø–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫: {getattr(gift, 'id')}")
                        await bot.send_message(
                            TELEGRAM_ID,
                            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∫—É–ø–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫: {getattr(gift, 'id')}"
                        )
                except Exception as e:
                    log(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –ø–æ–¥–∞—Ä–∫–∞: {e}")
                    await bot.send_message(
                        TELEGRAM_ID,
                        f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –ø–æ–¥–∞—Ä–∫–∞: {e}"
                    )
            await asyncio.sleep(5)
        except Exception as e:
            log(f"–û—à–∏–±–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞: {e}")
            await bot.send_message(TELEGRAM_ID, f"‚ùóÔ∏è –û—à–∏–±–∫–∞: {e}")
            await asyncio.sleep(10)

if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    loop.create_task(dp.start_polling(bot))
    loop.run_until_complete(main())